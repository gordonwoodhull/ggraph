/*!
 *  metagraph.js 0.0.7
 *  http://gordonwoodhull.github.io/metagraph.js/
 *  Copyright 2019 AT&T Intellectual Property
 *
 *  Licensed under the MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *  DEALINGS IN THE SOFTWARE.
 */


!function(){function e(){"use strict";var e={version:"0.0.7"},n=e;function r(e){return!e&&[]||(Array.isArray(e)?e:[e])}function t(e){return!e&&[]||(Array.isArray(e)?e:Object.keys(e).map(function(n){return{key:n,value:e[n]}}))}function u(e,n,r){return e.reduce(function(e,t){return e[n(t)]=r(t),e},{})}function o(e){return Object.assign({nodeKey:function(e){return e.key},edgeKey:function(e){return e.key},nodeValue:function(e){return e.value},edgeValue:function(e){return e.value},edgeSource:function(e){return e.value.source},edgeTarget:function(e){return e.value.target}},e||{})}function a(e,r){var t=e.nodes().map(function(e){return{key:e.key(),value:{calc:e.value().node.calc(e)(r)}}});return n.dataflow({nodes:t,edges:e.edges().map(e=>({key:e.key(),value:e.value()}))})}return e.graph=function(e,n,r){e=t(e),n=t(n);var a,c,s,d,i,f,g=o(r);function p(){a||(a=u(e,g.nodeKey,h))}function l(){c||(c=u(n,g.edgeKey,m))}function y(e){return l(),n.reduce(function(n,r){return(n[e(r)]=n[e(r)]||[]).push(k.edge(g.edgeKey(r))),n},{})}function h(e){return{value:function(){return g.nodeValue(e)},key:function(){return g.nodeKey(e)},graph:function(){return k},outs:function(){return i||(i=y(g.edgeSource)),i[g.nodeKey(e)]||[]},ins:function(){return f||(f=y(g.edgeTarget)),f[g.nodeKey(e)]||[]}}}function m(e){return{value:function(){return g.edgeValue(e)},key:function(){return g.edgeKey(e)},graph:function(){return k},source:function(){return k.node(g.edgeSource(e))},target:function(){return k.node(g.edgeTarget(e))}}}var k={node:function(e){return p(),a[e]},edge:function(e){return l(),c[e]},nodes:function(){return s||(p(),s=e.map(function(e){return k.node(g.nodeKey(e))})),s},edges:function(){return d||(l(),d=n.map(function(e){return k.edge(g.edgeKey(e))})),d}};return k},e.graph_adjacency=e.graph,e.graph_incidence=function(e,u){e=t(e);var a=function(e){var n=o(e);return Object.assign({nodeIncidences:e=>e&&(e.edges||e.ins||e.outs)||[],incidencesOutward:e=>{var r=n.nodeValue(e);return!r||!(!r.edges&&!r.outs)}},n)}(u),c=[];return e.forEach(function(e){var n=a.nodeKey(e),t=a.incidencesOutward(e);r(a.nodeIncidences(a.nodeValue(e))).forEach(function(e){c.push({key:function(e,n,r){return e?n+"-"+r:r+"-"+n}(t,n,e),value:function(e,n,r){return e?{source:n,target:r}:{source:r,target:n}}(t,n,e)})})}),n.graph_adjacency(e,c,u)},e.graph_detect=function(e,r){if(e.incidences)return n.graph_incidence(e.incidences,r);if(e.nodes)return n.graph_adjacency(e.nodes,e.edges,r);throw new Error("did not recognize graph format")},e.dataflow=function(e,r){var t=n.graph_detect(e,r);return{instantiate:function(e,n){var r={_yes_i_am_really_dataflow:!0,calc:function(n){if(!e[n]){var u=t.node(n);e[n]=u.value().calc(r).apply(null,u.ins().map(function(e){return r.calc(e.source().key())})),console.assert(e[n])}return e[n]},input:function(e,r){var t=n[e];return t._yes_i_am_really_dataflow?t.calc(r):t[r]}};return r}}},e.pattern=function(e,u){var o=e.dataflow&&n.graph_detect(e.dataflow),a=n.graph_detect(e.interface),c={node:{},edge:{}};a.nodes().forEach(function(e){c.node[e.key()]={members:{},class_members:{}}}),a.edges().forEach(function(e){var n=e.key(),t=e.value(),a=o||u[n.split(".")[0]],s=t.member;if(s&&s.funfun){var d=s.funfun(a,e,u);d=function(e,n){return function(r,t,u){var o=n(r,t,u);return function(){return o.apply(null,e.map(function(e){var n=e.split(".");return n.length>1?t.input(n[0],n[1]):t.calc(e)})).apply(null,arguments)}}}(r(t.deps),d),c.node[e.source().key()].members[t.name]={defn:d}}}),a.nodes().forEach(function(e){var n=e.key(),a=(e.value(),o||u[n.split(".")[0]]);r(e.value()).forEach(function(r){t(r.class_members).forEach(function(r){c.node[n].class_members[r.key]=r.value(a,e)}),t(r.members).forEach(function(r){var t=r.value(a,e);c.node[n].members[r.key]={accessor:t.accessor,defn:t.defn}})}),c.node[n].wrap=function(e,r){var t={},u=c.node[n].members;return Object.keys(u).forEach(function(n){t[n]=u[n].defn(c,e,r)}),t}});var s=a.nodes().map(function(e){var n={key:e.key(),value:{}},r=c.node[e.key()].class_members;return Object.keys(r).forEach(function(e){n.value[e]=r[e].defn(c)}),n}),d=a.edges().map(function(e){e.key(),e.source().key(),e.target().key()});return n.graph(s,d)},e.input=function(e){return{calc:function(n){var r=(e=e||n.key()).split("."),[t,u]=r.length>1?r:["data",e];return function(e){return function(e){return function(){return e.input(t,u)}}}}}},e.output=function(e,n){return{calc:function(e){return function(e){return function(e){return function(e){return e}}}}}},e.map=function(){return{calc:function(e){var n=r(e.value().refs)[0];return function(e){return function(r){return function(t){return u(t,e.node[n].members.key.accessor,e.node[n].wrap.bind(null,r))}}}}}},e.singleton=function(){return{calc:function(e){return function(e){return function(e){return function(){throw new Error("singleton not initialized")}}}}}},e.list=function(){return{calc:function(e){var n=r(e.value().refs)[0];return function(e){return function(r){return function(r,t){return r.map(function(r){return t[e.node[n].members.key.accessor(r)]})}}}}}},e.map_of_lists=function(e){return{calc:function(n){return function(t){return function(u){return function(u,o){var a=r(n.value().refs)[0];return u.reduce(function(n,r){var u=e(r);return(n[u]=n[u]||[]).push(o[t.node[a].members.key.accessor(r)]),n},{})}}}}}},e.subset=function(){return{calc:function(e){var n=r(e.value().refs)[0];return function(e){return function(r){return function(r,t){var u=new Set(t);return r.filter(function(r){return u.has(e.node[n].members.key.accessor(r))})}}}}}},e.createable=function(e){return{class_members:{create:function(n,r){return{defn:function(t){var u=a(n,t);return function(n){var o={},a=u.instantiate(o,{data:n});return o[e]=t.node[r.key()].wrap(a,n[r.key()]),o[e]}}}}}}},e.call=function(e){return function(n){return{members:[{key:e,value:function(e,r){return{accessor:n,defn:function(e,r,t){return function(){return n(t)}}}}}]}}},e.key=n.call("key"),e.value=n.call("value"),e.reference=function(e){return{reference:e}},e.fetch=function(){return{funfun:function(e,n){return function(e,n){return function(e){return function(){return e}}}}}},e.lookupArg=function(e){return{funfun:function(n,r){return e=e||(e=>e),function(n,r,t){return function(n){return function(r){return n[e(r)]}}}}}},e.lookupFVal=function(e){return{funfun:function(n,r){return function(n,r,t){return function(n){return function(){return n[e(t)]}}}}}},e.lookupKVal=function(){return{funfun:function(e,n){return function(e,r,t){return function(r){return function(){return r[e.node[n.source().key()].members.key.accessor(t)]||[]}}}}}},e.subgraph=function(){return{funfun:function(e,n,r){return function(t,u,o){var c=a(e,t),s=c,d=n.target().key().split(".");if(d.length>1){var i=d[0];s=a(r[i],t)}return function(){return function(e,r,o){var a=c.instantiate({},{data:{nodeKeys:e,edgeKeys:r},parent:u}),d={},i=s.instantiate(d,{data:a});return d.graph=t.node[n.target().key()].wrap(i,o),d.graph}}}}}},e.graph_pattern=function(e){var r=o(e);return{dataflow:{incidences:{nodes:{node:n.input()},edges:{node:n.input()},node_by_key:{node:n.map(),refs:"Node",ins:"nodes"},edge_by_key:{node:n.map(),refs:"Edge",ins:"edges"},graph:{node:n.singleton()},node_list:{node:n.list(),refs:"Node",ins:["nodes","node_by_key"]},edge_list:{node:n.list(),refs:"Edge",ins:["edges","edge_by_key"]},node_outs:{node:n.map_of_lists(r.edgeSource),refs:"Node",ins:["edges","edge_by_key"]},node_ins:{node:n.map_of_lists(r.edgeTarget),refs:"Node",ins:["edges","edge_by_key"]}}},interface:{nodes:{Graph:n.createable("graph"),Node:[n.key(r.nodeKey),n.value(r.nodeValue)],Edge:[n.key(r.edgeKey),n.value(r.edgeValue)]},edges:{graph_node:{name:"node",source:"Graph",target:"Node",deps:"node_by_key",member:n.lookupArg()},node_graph:{name:"graph",source:"Node",target:"Graph",deps:"graph",member:n.fetch()},graph_nodes:{name:"nodes",source:"Graph",target:"Node",deps:"node_list",member:n.fetch()},graph_edge:{name:"edge",source:"Graph",target:"Edge",deps:"edge_by_key",member:n.lookupArg()},edge_graph:{name:"graph",source:"Edge",target:"Graph",deps:"graph",member:n.fetch()},graph_edges:{name:"edges",source:"Graph",target:"Edge",deps:"edge_list",member:n.fetch()},edge_source:{name:"source",source:"Edge",target:"Node",deps:"node_by_key",member:n.lookupFVal(r.edgeSource)},edge_target:{name:"target",source:"Edge",target:"Node",deps:"node_by_key",member:n.lookupFVal(r.edgeTarget)},node_outs:{name:"outs",source:"Node",target:"Edge",deps:"node_outs",member:n.lookupKVal()},node_ins:{name:"ins",source:"Node",target:"Edge",deps:"node_ins",member:n.lookupKVal()}}}}},e.subgraph_pattern=function(e){o(e);return{dataflow:{incidences:{parent_nodes:{node:n.input("parent.nodes")},parent_edges:{node:n.input("parent.edges")},node_keys:{node:n.input("nodeKeys")},edge_keys:{node:n.input("edgeKeys")},subset_nodes:{node:n.subset(),refs:"child.Node",ins:["parent_nodes","node_keys"]},subset_edges:{node:n.subset(),refs:"child.Edge",ins:["parent_edges","edge_keys"]},nodes:{node:n.output(),ins:"subset_nodes"},edges:{node:n.output(),ins:"subset_edges"}}},interface:{nodes:{ParentGraph:"parent.Graph",ChildGraph:"child.Graph"},edges:{subgraph:{name:"subgraph",source:"ParentGraph",target:"ChildGraph",member:n.subgraph()},subnode:{name:"subnode",source:"ParentGraph",target:"ChildGraph",deps:"parent.node_by_key",member:n.lookupArg()},subedge:{name:"subedge",source:"ParentGraph",target:"ChildGraph",deps:"parent.edge_by_key",flow:n.lookupArg()},subgraphS:{name:"subgraph",source:"ChildGraph",target:"ParentGraph",member:n.subgraph()},subnodeS:{name:"subnode",source:"ChildGraph",target:"ParentGraph",deps:"node_by_key",member:n.lookupArg(e=>e.key())},subedgeS:{name:"subedge",source:"ChildGraph",target:"ParentGraph",deps:"edge_by_key",flow:n.lookupArg(e=>e.key())}}}}},e.topological_sort=function(e){var n={},r={},t=[];function u(e){if(n[e.key()])throw new Error("not a DAG");r[e.key()]||(n[e.key()]=!0,e.outs().forEach(function(e){u(e.target())}),r[e.key()]=!0,n[e.key()]=!1,t.unshift(e))}for(var o=0;Object.keys(r).length<e.nodes().length;){for(;r[e.nodes()[o].key()];)++o;u(e.nodes()[o])}return t},e.compose=function(e){var t=n.topological_sort(e),u={},o={};function a(e,n){return e.ins().find(e=>e.value().input===n)}t.forEach(function(e){var t=n.graph_detect(e.value().dataflow),c=t.nodes().map(function(n){var t=Object.assign({},n.value());return t.refs=r(t.refs).map(function(n){var r=n.split(".");return r.length>1?a(e,r[0]).source().key()+"."+r[1]:e.key()+"."+r[0]}),{key:n.key(),value:t}}),s=t.edges().map(e=>({key:e.key(),value:e.value()}));o[e.key()]=n.graph(c,s);var d=e.value().interface;u[e.key()]=n.graph_detect({nodes:d.nodes,edges:d.edges})});var c=[],s=[],d={};function i(e){return d[e]||e}return t.forEach(function(e){var n=u[e.key()];n.nodes().forEach(function(n){var t=e.key()+"."+n.key(),u=r(n.value()).find(e=>"string"==typeof e);if(u){var o=u.split("."),s=i(a(e,o[0]).source().key()+"."+o[1]);d[t]=s}else c.push({key:t,value:n.value()})}),n.edges().forEach(function(n){var r=Object.assign({},n.value());r.source=i(e.key()+"."+n.source().key()),r.target=i(e.key()+"."+n.target().key()),s.push({key:e.key()+"."+n.key(),value:r})})}),n.pattern({interface:{nodes:c,edges:s}},o)},e}"function"==typeof define&&define.amd?define([],e):"object"==typeof module&&module.exports?module.exports=e():this.metagraph=e()}();
//# sourceMappingURL=metagraph.min.js.map