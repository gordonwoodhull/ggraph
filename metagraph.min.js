/*!
 *  metagraph.js 0.0.2
 *  http://gordonwoodhull.github.io/metagraph.js/
 *  Copyright 2017 AT&T Intellectual Property
 *
 *  Licensed under the MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *  DEALINGS IN THE SOFTWARE.
 */


!function(){function a(){"use strict";function a(a){return Object.keys(a).map(function(b){return{key:b,value:a[b]}})}function b(a,b,c){return a.reduce(function(a,d){return a[b(d)]=c(d),a},{})}var c={version:"0.0.2"},d=c;return c.graph=function(c,d,e){function f(){o||(o=b(c,e.nodeKey,m))}function g(){p||(p=b(d,e.edgeKey,n))}function h(){q||(f(),q=c.map(function(a){return u.node(e.nodeKey(a))}))}function i(){r||(g(),r=d.map(function(a){return u.edge(e.edgeKey(a))}))}function j(a){return g(),d.reduce(function(b,c){var d=b[a(c)]=b[a(c)]||[];return d.push(u.edge(e.edgeKey(c))),b},{})}function k(){s||(s=j(e.edgeSource))}function l(){t||(t=j(e.edgeTarget))}function m(a){return{value:function(){return a},key:function(){return e.nodeKey(a)},graph:function(){return u},outs:function(){return k(),s[e.nodeKey(a)]},ins:function(){return l(),t[e.nodeKey(a)]}}}function n(a){return{value:function(){return a},key:function(){return e.edgeKey(a)},graph:function(){return u},source:function(){return u.node(e.edgeSource(a))},target:function(){return u.node(e.edgeTarget(a))}}}Array.isArray(c)||(c=a(c)),Array.isArray(d)||(d=a(d)),e=Object.assign({nodeKey:function(a){return a.key},edgeKey:function(a){return a.key},edgeSource:function(a){return a.value.source},edgeTarget:function(a){return a.value.target}},e||{});var o,p,q,r,s,t,u={node:function(a){return f(),o[a]},edge:function(a){return g(),p[a]},nodes:function(){return h(),q},edges:function(){return i(),r}};return u},c.pattern=function(a){function b(a,b){return function(c,d,e){var f=b(c,d,e);return function(){return f.apply(null,a.map(function(a){return c.indices[a](c,d)})).apply(null,arguments)}}}var c=d.graph(a.nodes,a.edges),e={node:{},edge:{},indices:{}};return c.nodes().forEach(function(a){e.node[a.key()]={members:{}}}),c.edges().forEach(function(a){var c=a.value().value;if(c.buildIndex){var d=c.buildIndex(a);e.indices[a.key()]=function(b,c){if(!c.indices[a.key()]){var e,f=[b,c];if(d.deps){var g=Array.isArray(d.deps)?d.deps:[d.deps];f=f.concat(g.map(function(a){return b.indices[a](b,c)})),e=d.funfun.apply(d,f)}else e=d.funfun(b,c);c.indices[a.key()]=e}return c.indices[a.key()]}}var f,g;if(c.sourceMember){var h=c.sourceMember(a);g=h.funfun,h.deps&&(f=Array.isArray(h.deps)?h.deps:[h.deps],g=b(f,g)),e.node[a.source().key()].members[h.name]=g}if(c.targetMember){var i=c.targetMember(a);g=i.funfun,i.deps&&(f=Array.isArray(i.deps)?i.deps:[i.deps],g=b(f,g)),e.node[a.target().key()].members[i.name]=g}}),function(a){var b={indices:{},objects:{},data:a};return c.nodes().forEach(function(c){e.node[c.key()].wrap=function(a){var d={};return Object.keys(e.node[c.key()].members).forEach(function(f){d[f]=e.node[c.key()].members[f](e,b,a)}),d.value=function(){return a},c.value().value.keyFunction&&(d.key=function(){return c.value().value.keyFunction(a)}),d},c.value().value.single&&(b.objects[c.key()]=e.node[c.key()].wrap(a[c.key()]))}),{root:function(a){return b.objects[a]}}}},c.basic_type=function(){return{single:!1}},c.single_type=function(){return Object.assign(d.basic_type(),{single:!0})},c.table_type=function(a){return Object.assign(d.basic_type(),{keyFunction:a})},c.one_to_many=function(a){return Object.assign(a,{buildIndex:function(a){return{funfun:function(c,d){return b(d.data[a.target().key()],a.target().value().value.keyFunction,c.node[a.target().key()].wrap)}}},sourceMember:function(a){return{name:a.value().value.source_member,deps:a.key(),funfun:function(a,b,c){return function(a){return function(b){return a[b]}}}}},targetMember:function(a){return{name:a.value().value.target_member,funfun:function(b,c,d){return function(){return c.objects[a.source().key()]}}}}})},c.get_table=function(a){return Object.assign(a,{buildIndex:function(a){return{deps:a.value().value.index,funfun:function(b,c,d){return c.data[a.target().key()].map(function(b){return d[a.target().value().value.keyFunction(b)]})}}},sourceMember:function(a){return{name:a.value().value.source_member,deps:a.key(),funfun:function(a,b,c){return function(a){return function(){return a}}}}}})},c.many_to_one=function(a){return Object.assign(a,{buildIndex:function(a){return{deps:a.value().value.target_deps,funfun:function(b,c,d){return c.data[a.source().key()].reduce(function(b,c){var e=a.value().value.access(c),f=b[e]=b[e]||[];return f.push(d[a.source().value().value.keyFunction(c)]),b},{})}}},sourceMember:function(a){return{name:a.value().value.source_member,deps:a.value().value.source_deps,funfun:function(b,c,d){return function(b){return function(){return b[a.value().value.access(d)]}}}}},targetMember:function(a){return{name:a.value().value.target_member,deps:a.key(),funfun:function(b,c,d){return function(b){return function(){return b[a.target().value().value.keyFunction(d)]}}}}}})},c.graph_pattern=function(a){return a=Object.assign({nodeKey:function(a){return a.key},edgeKey:function(a){return a.key},edgeSource:function(a){return a.value.source},edgeTarget:function(a){return a.value.target}},a||{}),{nodes:{Graph:d.single_type(),Node:d.table_type(a.nodeKey),Edge:d.table_type(a.edgeKey)},edges:{graph_node:d.one_to_many({source:"Graph",target:"Node",source_member:"node",target_member:"graph"}),graph_nodes:d.get_table({source:"Graph",target:"Node",source_member:"nodes",index:"graph_node"}),graph_edge:d.one_to_many({source:"Graph",target:"Edge",source_member:"edge",target_member:"graph"}),graph_edges:d.get_table({source:"Graph",target:"Edge",source_member:"edges",index:"graph_edge"}),edge_source:d.many_to_one({source:"Edge",target:"Node",source_member:"source",source_deps:"graph_node",target_member:"outs",target_deps:"graph_edge",access:a.edgeSource}),edge_target:d.many_to_one({source:"Edge",target:"Node",source_member:"target",source_deps:"graph_node",target_member:"ins",target_deps:"graph_edge",access:a.edgeTarget})}}},c}"function"==typeof define&&define.amd?define([],a):"object"==typeof module&&module.exports?module.exports=a():this.metagraph=a()}();
//# sourceMappingURL=metagraph.min.js.map